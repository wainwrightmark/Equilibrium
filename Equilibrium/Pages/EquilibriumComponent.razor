@using tainicom.Aether.Physics2D.Dynamics
@using tainicom.Aether.Physics2D.Common

<div style="width: 100%; height: 100%;">
    <div id="canvasContainer"
         @ref="_container"
         style="margin-left: auto; margin-right: auto; width: @(CanvasWidth + "px"); height: @(CanvasHeight + "px"); position: relative; border: 1px solid black;">
        <Canvas @onmousemove="MouseMoveCanvas"
                @onmouseup="MouseUpCanvas"
                @onmousedown="MouseDownCanvas"
                @onmouseout="MouseOutCanvas"

                @ontouchleave="TouchLeaveCanvas"
                @ontouchmove="TouchMoveCanvas"

                @ontouchend="TouchEndCanvas"

                @ref="_canvas"
                Width="@CanvasWidth"
                Height="@CanvasHeight">
        </Canvas>

        <div style="position: absolute; top: 25px; left: 50px;">
            
            <select @bind="LevelName">
                @foreach (var level in SavedLevels)
                {
                    <option value="@level.Name">@level.GetDisplayString()</option>
                }
            </select>
            <br/>
            <label>FPS: @TransientState.FramesPerSecond</label>
            <br/>
            <button @onclick="() => GameState.Restart(TransientState)">Restart</button>
            <br/>

            @if (GameState.IsWin is not null)
            {
@if (GameState.Message is not null)
{
    <label>@GameState.Message</label>
    <br/>
}

                <label>Difficulty</label>
                <RatingComponent @bind-Rating="LevelDifficulty"/>
                <br/>
                <label>Fun</label>
                <RatingComponent @bind-Rating="LevelFun"/>
                <br/>
                

                <button @onclick="RandomLevel">Random Level</button>
            }
        </div>


    </div>


    <div style="width: @(CanvasWidth + "px"); height: 135px; overflow-y: hidden; overflow-x: auto; margin-left: auto; margin-right: auto;">
        <menu style="display: flex; list-style: none; padding: 0; margin-top: 5px;">
            @foreach (var shape in GameState.RemainingShapes())
            {
                <div style="margin: 0; padding: 0;">
                    <ShapeOptionComponent GameShape="shape.shape" Count="@shape.count" TransientState="TransientState"/>
                </div>
            }
        </menu>

    </div>
</div>


@code{
        
    public const float CanvasWidth = 350;
    public const float CanvasHeight = 500;

    public string LevelName
    {
        get => UserLevel.Name;
        set
        {
            if (value == LevelName) return;

            var level = SavedLevels.First(x => x.Name == value);
            UserLevel = level;
            GameState.ChangeLevel(UserLevel.Level, TransientState);
        }
    }

    private static readonly UserLevel BasicLevel = new("Basic", Level.Basic, false, null, null);

    public List<UserLevel> SavedLevels { get; set; } = new() {BasicLevel };

    public UserLevel UserLevel { get; set; } = BasicLevel;

    public async Task RandomLevel()
    {
        var seed = new Random().Next();

        var name = $"Level-{seed}";
        var level = Level.MakeRandomLevel(new Random(seed));
        UserLevel = new UserLevel(name, level, false, null, null);

        GameState.ChangeLevel(level, TransientState);
    }

    private async Task SaveLevel()
    {
        await LocalStorageService.SetItemAsync(UserLevel.Name, UserLevel);

        SavedLevels.RemoveAll(x => x.Name == UserLevel.Name);
        SavedLevels.Add(UserLevel);
    }

    public int? LevelDifficulty
    {
        get => UserLevel.DifficultyStars;
        set
        {
            UserLevel = UserLevel with{DifficultyStars = value};
            SaveLevel();
        }
    }

    public int? LevelFun
    {
        get => UserLevel.FunStars;
        set
        {
            UserLevel = UserLevel with{FunStars = value};
            SaveLevel();
        }
    }


}