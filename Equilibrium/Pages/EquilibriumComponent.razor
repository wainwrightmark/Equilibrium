@using tainicom.Aether.Physics2D.Dynamics
@using tainicom.Aether.Physics2D.Common
@using static Constants;

<div style="width: 100%; height: 100%; background-color: gray;">
    <div id="canvasContainer"
         @ref="_container"
         style="margin-left: auto; margin-right: auto; 
                width: @(_canvasWidth + "px");
                position: relative; padding: 0;"
         >
        <Canvas 
            @oncontextmenu:stopPropagation="true"
            @onmousedown="OnMouseDown"
            @onmousemove="OnMouseMove"
            @onmouseout="OnMouseOut"
            @onmouseup="OnMouseUp"
            @onmousewheel="OnMouseWheel"
            
            @ontouchstart="OnTouchStart"
            @ontouchmove="OnTouchMove"
            @ontouchend="OnTouchEnd"
            @ontouchcancel="OnTouchCancel"
            @onkeypress="OnKeyPress"

            @ref="_canvas"
            style="user-select: none; outline: none;"
                Width="@_canvasWidth"
                Height="@_canvasHeight">
        </Canvas>

        <div style="position: absolute; top: 25px; margin: 25px;">
            
            <select @bind="LevelName" style="width: @(_canvasWidth - 50 + "px;")">
                @foreach (var level in SavedLevels)
                {
                    <option value="@level.Name">@level.GetDisplayString()</option>
                }
            </select>
            <br/>
            <button @onclick="RandomLevel">Random Level</button>
            
            <br/>

            <ProgressComponent @ref="_progressComponent" GameState="GameState" CanvasWidth="_canvasWidth"/>
            <br/>

            @if (GameState.IsWin)
            {
                <input class="alert-state" id="win-alert" type="checkbox">
                <div class="alert alert-success dismissible" style="display: block; width: @(_canvasWidth - 50 + "px;")">
                    <h3>Congratulations</h3>
                    <br/>
                    <label for="levelDifficultyRating">Difficulty</label>
                    <RatingComponent @bind-Rating="LevelDifficulty"/>
                    <br/>
                    <label for="levelFunRating">Fun</label>
                    <RatingComponent @bind-Rating="LevelFun"/>
                    <br/>
                    <div style="display: flex; justify-content: space-evenly;">
                        <button @onclick="() => GameState.Restart(TransientState, new Random())">Restart</button>

                        <label class="btn-close paper-btn" for="win-alert">X</label>
                    </div>

                    
                </div>

            }
        </div>
    </div>
</div>


@code{
        
    

    public string LevelName
    {
        get => UserLevel.Name;
        set
        {
            if (value == LevelName) return;

            var level = SavedLevels.First(x => x.Name == value);
            UserLevel = level;
            GameState.ChangeLevel(UserLevel.Level, TransientState, new Random());
        }
    }

    private static readonly UserLevel BasicLevel = new("Basic", Level.Basic, false, null, null);

    public List<UserLevel> SavedLevels { get; set; } = new() {BasicLevel };

    public UserLevel UserLevel { get; set; } = BasicLevel;

    public async Task RandomLevel()
    {
        var seed = new Random().Next();

        var name = $"Level-{seed}";
        var level = Level.MakeRandomLevel(new Random(seed));
        UserLevel = new UserLevel(name, level, false, null, null);

        GameState.ChangeLevel(level, TransientState, new Random());
    }

    private async Task SaveLevel()
    {
        await LocalStorageService.SetItemAsync(UserLevel.Name, UserLevel);

        SavedLevels.RemoveAll(x => x.Name == UserLevel.Name);
        SavedLevels.Add(UserLevel);
    }

    public int? LevelDifficulty
    {
        get => UserLevel.DifficultyStars;
        set
        {
            UserLevel = UserLevel with{DifficultyStars = value};
            SaveLevel();
        }
    }

    public int? LevelFun
    {
        get => UserLevel.FunStars;
        set
        {
            UserLevel = UserLevel with{FunStars = value};
            SaveLevel();
        }
    }


   

}