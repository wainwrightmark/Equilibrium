@using Excubo.Blazor.Canvas.Contexts
@using tainicom.Aether.Physics2D.Common

<button @onclick="OnClick" style="width:@Width; height: @Height; z-index: -1;">
    <Canvas
        @ref="_canvas"
        style="position: relative;"
        Width="@Width"
        Height="@Height">
    </Canvas>
    @Count
</button>



@code {

    private Canvas _canvas = null!;
    private Context2D _canvasContext = null!;

    [Parameter]
    public GameShape GameShape { get; set; } = null!;

    [Parameter]
    public int Count { get; set; }


    [Parameter]
    public TransientState TransientState { get; set; } = null!;

    public int NumberOfRotations { get; private set; } = 0;

    private ChosenShape ThisAsChosenShape => new(GameShape, NumberOfRotations);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvasContext = await _canvas.GetContext2DAsync();
        }
        await Draw();
    }

        public const float Width = 100;
        public const float Height = 100;


    public async Task Draw()
    {
        string fillColor;
        string strokeColor;
        int lineWidth;
        if (Count <= 0)
        {
            fillColor = Colors.Grey;
            strokeColor = Colors.Black;
            lineWidth = 1;
        }
        else
        {
            if (TransientState.ChosenShape?.Shape == GameShape)
            {
                lineWidth = 3;
                strokeColor = Colors.Green;
            }

            else
            {
                lineWidth = 1;
                strokeColor = Colors.Black;
            }
            fillColor = GameShape.Color;
        }

        await using var batch = _canvasContext.CreateBatch();

        await batch.ClearRectAsync(0, 0, Width, Height);

        await batch.LineWidthAsync(lineWidth);

        await batch.FillStyleAsync(fillColor);
        await batch.StrokeStyleAsync(strokeColor);

        var rotation = ThisAsChosenShape.Rotation;
        foreach (var shape in GameShape.GetShapes(60))
        {
            await batch.DrawShapeAsync(
                shape,
                new Transform(new Vector2(Width / 2, Height / 2), rotation));
        }
    }

    private async Task OnClick()
    {
        if (Count > 0)
        {
            if (TransientState.ChosenShape?.Shape == GameShape)
            {
                NumberOfRotations++;
                if (NumberOfRotations >= GameShape.MaxRotations)
                {
                    NumberOfRotations = 0;
                    TransientState.ChosenShape = null;
                }
                else
                {
                    TransientState.ChosenShape = ThisAsChosenShape;
                }
            }

            else
                TransientState.ChosenShape = ThisAsChosenShape;

            await Draw();
        }
    }
    } 