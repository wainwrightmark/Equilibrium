@using tainicom.Aether.Physics2D.Dynamics
@using tainicom.Aether.Physics2D.Common



<div id="canvasContainer" @ref="container" >
    <Canvas @onmousemove="MouseMoveCanvas"
            @onmouseup="MouseUpCanvas" 
            @onmousedown="MouseDownCanvas"
            @onmouseout="MouseOutCanvas"
            
            @ontouchleave="TouchLeaveCanvas"
            @ontouchmove="TouchMoveCanvas"

            @ontouchend="TouchEndCanvas"
            
            @ref="_canvas" 
            Width="@TransientState.CanvasWidth"
            Height="@TransientState.CanvasHeight"  ></Canvas>
</div>

@foreach (var shape in GameState.RemainingShapes())
{
    
    <ShapeOptionComponent GameShape="shape.shape" Count="@shape.count" TransientState="TransientState"/>
}
@if (GameState.Message is not null)
{
    <br/>
    <label>@GameState.Message</label>
}

<br/>
<button @onclick="()=> GameState.Restart(TransientState)">Restart</button>
<br/>
<label>FPS: @TransientState.FramesPerSecond</label>
<br/>
<button @onclick="ChangeLevel">ChangeLevel</button>
<br/>
<label>Difficulty</label>
<RatingComponent @bind-Rating="LevelDifficulty"/>
<label>Fun</label>
<RatingComponent @bind-Rating="LevelFun"/>

@*<select @bind="LevelName">
    @foreach (var level in GameLevel.Levels)
    {
        <option value="@level.Name">@level.Name</option>
    }
</select>*@

@code{

    public UserLevel UserLevel { get; set; } = new ("Basic", Level.Basic, false, null, null);

    public async Task ChangeLevel()
    {
        var seed = new Random().Next();

        var name = $"Level-{seed}";
        var level= Level.MakeRandomLevel(new Random(seed));
        UserLevel = new UserLevel(name, level, false,null, null);

        
        GameState.ChangeLevel(level, TransientState);

        await SaveLevel();
    }

    private Task SaveLevel()
    {
        return Task.CompletedTask;
        return LocalStorageService.SetItemAsync(UserLevel.Name, UserLevel);
    }

    public int? LevelDifficulty
    {
        get { return UserLevel.DifficultyStars; }
        set
        {
            UserLevel = UserLevel with{DifficultyStars = value};
            SaveLevel();
        }
    }
    
    public int? LevelFun
    {
        get { return UserLevel.FunStars; }
        set
        {
            UserLevel = UserLevel with{FunStars = value};
            SaveLevel();
        }
    }


    //public string LevelName
    //{
    //    get => this.GameState.Level.Name;

    //    set
    //    {
    //        if (value != this.GameState.Level.Name)
    //        {
    //            var level = GameLevel.Levels.FirstOrDefault(x => x.Name == value);
    //            if (level != null)
    //            {
    //                GameState.ChangeLevel(level, TransientState);
    //            }
    //        }
    //    }
    //}

}